# -*- coding: utf-8 -*-
"""web_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dj0FikGq4T70tGsa5vN45yMa84nbkK0f
"""

import streamlit as st
import torch
import torch.nn as nn
import numpy as np
from PIL import Image

latent_dim = 100

class Generator(nn.Module):
    def __init__(self, latent_dim, num_classes):
        super().__init__()
        self.label_embed = nn.Embedding(num_classes, latent_dim)
        self.model = nn.Sequential(
            nn.Linear(latent_dim, 128),
            nn.LeakyReLU(0.2),
            nn.Linear(128, 784),
            nn.Tanh()
        )

    def forward(self, noise, labels):
        x = noise * self.label_embed(labels)
        img = self.model(x)
        return img.view(-1, 1, 28, 28)

# Load model
device = torch.device("cpu")
G = Generator(latent_dim, 10).to(device)
G.load_state_dict(torch.load("generator.pth", map_location=device))
G.eval()

# Streamlit UI
st.title("Handwritten Digit Generator (MNIST)")
digit = st.selectbox("Select a digit to generate (0â€“9)", list(range(10)))

if st.button("Generate 5 Images"):
    noise = torch.randn(5, latent_dim)
    labels = torch.full((5,), digit, dtype=torch.long)
    with torch.no_grad():
        generated = G(noise, labels).cpu()

    cols = st.columns(5)
    for i, col in enumerate(cols):
        img = generated[i].squeeze(0).numpy()
        img = ((img + 1) / 2 * 255).astype(np.uint8)
        col.image(Image.fromarray(img), caption=f"{digit}-{i+1}", width=100)